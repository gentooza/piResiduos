/*
 *  PiResiduos
 *
 *  Copyright 2023 Joaquín Cuéllar <joa (dot) cuellar (at) riseup (dot) net>
 *
 *  Some rights reserved. See COPYING, AUTHORS.
 *  This file may be used under the terms of the GNU General Public
 *  License version 3.0 ,or any later version of GPL, as published by the Free Software Foundation
 *  and appearing in the file COPYING included in the packaging of
 *  this file.
 *
 *  This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 *  WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

//***************************************************************************
//                          pvapp.h  -  description
//                             -------------------
//  begin            : mié mar 8 12:47:31 2017
//  generated by     : pvdevelop (C) Lehrig Software Engineering
//  email            : lehrig@t-online.de
//***************************************************************************
#ifndef _PVAPP_H_
#define _PVAPP_H_

#ifdef USE_INETD
static int trace=0; // todo: set trace=0 if you do not want printf() within event loop
#else
static int trace=1; // todo: set trace=0 if you do not want printf() within event loop
#endif

#include <string>

#include "processviewserver.h"
#include <rltime.h>
#include <time.h>
#include <chrono>
#include <iostream>
#include <ctime>
#include "camera.h"
#include "ini.h"
#include "generic_tools.h"

#include "qtdatabase.h"
#include "database.h"
#include "bascula.h"
#include "baseForm.h"
#include "inputForm.h"
#include "outputForm.h"
//#include "tableta.h"
#include "mail.h"

#include "station.h"

// todo: comment me out
//#include "rlmodbusclient.h"
//#include "rlsiemenstcpclient.h"
//#include "rlppiclient.h"
//#include "modbusdaemon.h"             // this is generated. Change for name.h -> "name.mkmodbus"
//#include "siemensdaemon.h"            // this is generated
//#include "ppidaemon.h"                // this is generated


int show_mask10(PARAM *p);
int show_mask9(PARAM *p);
int show_mask8(PARAM *p);
int show_mask7(PARAM *p);
int show_mask6(PARAM *p);
int show_mask5(PARAM *p);
int show_mask4(PARAM *p);
int show_mask3(PARAM *p);
int show_mask2(PARAM *p);
int show_mask1(PARAM *p);

enum{
  NO_DEVICE = 0,
  CAMERA_1,
  CAMERA_2,
  CAMERA_3,
  CAMERA_4,
  REMOTE_SERVER
};

typedef struct
{
  std::chrono::steady_clock::time_point begin;
  std::chrono::steady_clock::time_point end;
  long seconds;
  int minutes;
}
  SYNC_DATA;

typedef struct // (todo: define your data structure here)
{
  std::string ip;
  int port;
  int timeout;
  int relayA;
  int relayB;
  SYNC_DATA lastGreen;
  int statusA;
  int statusB;
}
CAMERA_DATA;

typedef struct // (todo: define your data structure here)
{
  std::string port;
  int bauds;
  int timeout;
  std::string ask;
  int parity;
  int stopBits;
  int ctrl;
}
  BASCULA_DATA;

typedef struct // (todo: define your data structure here)
{
  std::string smtpServer;
  std::string mailUser;
  std::string mailPass;
  int smtpPort;
  int smtpEncryption;
  std::vector <std::string> mailRecipients;
  std::string mailSenderName;
}
  MAIL_DATA;

typedef struct
{
  std::string name;
  int type;
  std::string strType;
  int code;

}
  STATION_DATA;

typedef struct
{
  std::string db_type;
  std::string db_host;
  std::string local_db_host;
  std::string db_name;
  std::string db_user;
  std::string db_pass;
  std::string db_port;
  std::string local_db_port;
}
  DATABASE_DATA;

typedef struct // (todo: define your data structure here)
{
  int traffic_lights_enabled;
}
GLOBAL_DATA;

typedef struct
{
  std::string RES_LOADING;
  std::string RES_IMG_SELECT;
  std::string RES_IMG_DELETE;
  std::string RES_IMG_GREY;
  std::string RES_IMG_IMAGE;
  std::string RES_IMG_EDIT;
  std::string RES_IMG_LOGOBIO;
  std::string RES_IMG_LOGOPROINT;
  std::string RES_IMG_RED;
  std::string RES_IMG_GREEN;
  std::string RES_IMG_VOID;
  std::string RES_IMG_DOWN_ARROW;
  std::string RES_IMG_UP_ARROW;
  std::string RES_IMG_MURALBIO;

}
  RESOURCES;


extern long DEF_BIORECICLAJE_CODE;
extern long DEF_TRANS_CODE;
extern float DEF_ERROR_SCALES;

extern qtDatabase localDatabase;
extern qtDatabase remoteDatabase;
extern baseForm* formEntrada;
extern baseForm* formSalida;
extern baseForm* formDI;
extern std::string type;
extern std::string nombre;
extern std::vector <std::string> console;
extern bascula* bascula1;
extern std::vector < CAMERA_DATA> cameras;
extern std::vector < BASCULA_DATA> basculas;
extern MAIL_DATA mailData;
#endif
